>> unique_ptr
unique_ptr works with single ownership model. Only one pointer at a time can access the resource.
We can not assign one unique_ptr to another as copy constructor and assignment operator is deleted from the unique_ptr class
We can move the ownership from one unique_ptr to another using std::move() and this is done because of the 
move constructor and move assignment operator in the unique_ptr class
When the unique_ptr object goes out of scope, memory of the recource is released in unique_ptr destuctor

Declaration - 
unique_ptr<int> ptr(new int(10));
Or
unique_ptr<int> ptr = make_unique<int>(10);

For User defined class 
unique_ptr<sample> ptr(new sample());
Or
unique_ptr<sample> ptr = make_unique<sample>();

#include <iostream>
#include <memory>

class Resource {
public:
    Resource() { std::cout << "Resource acquired\n"; }
    ~Resource() { std::cout << "Resource destroyed\n"; }
};

int main() {
    std::unique_ptr<Resource> ptr1 = std::make_unique<Resource>();
    // std::unique_ptr<Resource> ptr2 = ptr1; // Error! Copying is not allowed
    std::unique_ptr<Resource> ptr2 = std::move(ptr1); // Ownership transferred
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

>> shared_ptr
Unlike unique ptr, shared ptr allows us to share the resource among multiple shared pointers.
Shared_ptr class internally maintains the referece count. 
When one shared ptr is assigned to another then reference count gets increased.
when any shared ptr object goes out of scope then count is decremneted and object is destroyes only when last shared_ptr goes out of scope.

class Resource {
public:
    Resource() { std::cout << "Resource acquired\n"; }
    ~Resource() { std::cout << "Resource destroyed\n"; }
};

int main() {
    std::shared_ptr<Resource> ptr1 = std::make_shared<Resource>();
    std::shared_ptr<Resource> ptr2 = ptr1;
    std::cout << "Reference count: " << ptr1.use_count() << std::endl;
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

>> weak_ptr

A std::weak_ptr is a non-owning smart pointer that refers to a std::shared_ptr without increasing its reference count.
With shared_ptr we can share the resorces with multiple shared_ptr's but there is a chance of cyclic dependency.
Due to which reference count will not be zero and object will not be destroyed.

Example of cyclic dependency - 
class sample
{
public:
	shared_ptr<sample> m_sharedPtr;
};

int main()
{
	shared_ptr<sample> s1(new sample());
	shared_ptr<sample> s2(new sample());
	s1->m_sharedPtr = s2;
	s2->m_sharedPtr = s1;
}

We can resolve it by using weak_ptr - 
class Sample {
public:
    std::weak_ptr<Sample> m_weakPtr; // Use weak_ptr to prevent cyclic dependency
};

int main() {
    std::shared_ptr<Sample> s1 = std::make_shared<Sample>();
    std::shared_ptr<Sample> s2 = std::make_shared<Sample>();
    
    s1->m_weakPtr = s2; // Weak reference, doesn't increase ref count
    s2->m_weakPtr = s1; // Weak reference, doesn't increase ref count

    return 0;
}

Before using a weak_ptr, you must convert it into a shared_ptr using .lock().
shared_ptr<Sample> s3 = s1->m_weakPtr.lock();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

>> Move Semantics

what is lvalue and rvalue?
lvalue - usually left side of the assignment for which memory is allocated
rvalue - right side of the assignment for which memory is not allocated
For example - 
int x = 10;
Here x is lvalue and 10 is the rvalue

What is the benefit of move semantics?

Using move semantics we can avoid unnecessary copies or unnecessary calls to copy constructor and assignment operators 
and because of this we can avoid unnecessary memory allocation for the temporary objects.

How it can be achieved?
It can be achieved by using move constructor and move assignment operator.
also we can use std::move() to convert lvalue to rvalue

Concept	Explanation
lvalue	- Has a persistent memory address, can be assigned (int x = 10;).
rvalue	- Temporary, cannot be assigned (10 in int x = 10;).
Move Constructor	- Transfers ownership, avoids deep copy (Test(Test&&)), nullifies the source.
std::move	- Converts lvalue to rvalue, enabling move operations.
Use Case	- Moving large objects like std::vector to avoid unnecessary memory allocation.


Where is Move Semantics Useful?
Returning large objects from functions (avoid unnecessary copies).
Transferring ownership of dynamically allocated resources.
Performance optimization in STL containers like std::vector, std::string, std::unique_ptr.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Variadic Templates in C++
Variadic templates allow a function or class to accept a variable number of template arguments. They enable writing flexible and reusable code without specifying the exact number of parameters in advance.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::map and std::unordered_map are both associative containers but differ in their internal implementations:

1. **Data Structure:**
   - `std::map` is implemented as a **Red-Black Tree** (self-balancing BST).
   - `std::unordered_map` is implemented using **Hash Tables**.

2. **Sorting:**
   - `std::map` stores keys in **sorted order** (increasing order by default).
   - `std::unordered_map` **does not sort** keys; they appear in an **arbitrary order**.

3. **Time Complexity:**
   - `std::map`: **O(log n)** for insert, find, and erase (due to tree traversal).
   - `std::unordered_map`: **O(1) average, O(n) worst-case** (due to hash collisions).

4. **Memory Usage:**
   - `std::unordered_map` consumes **more memory** because of hash tables and bucket allocations.
   - `std::map` is **more memory-efficient**.

5. **When to Use Which?**
   - Use `std::map` when **sorted keys** or **range-based operations** are needed. Such as lower_bound and upper_bound
   - Use `std::unordered_map` for **faster lookups** when ordering is not required.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

std::vector is a dynamic array stored in contiguous memory, allowing fast random access (O(1)) but slower insertions/deletions in the middle (O(n)).

std::list is a doubly linked list, allowing fast insertions and deletions (O(1)) at arbitrary positions but slow access (O(n)).

Use vector when: Frequent access is needed, and insertions/deletions happen mostly at the end.

Use list when: Frequent insertions/deletions at arbitrary positions are needed, and random access is not required.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

What are the advantages of std::array over std::vector? When would you prefer using std::array instead of std::vector?

‚úÖ Correct: std::array is preferable when the number of elements is fixed at compile time, whereas std::vector is used when the size can change dynamically.
üîç Additional Key Differences:

Memory Allocation:

std::array is allocated on the stack, making it more efficient and avoiding heap allocations.

std::vector dynamically allocates memory on the heap, which incurs some performance overhead.

Performance:

std::array provides faster access due to cache locality since its elements are stored contiguously on the stack.

std::vector has some extra overhead due to dynamic memory management and potential reallocation.

Size Safety:

std::array has a fixed size that cannot change at runtime, making it less error-prone in cases where the size is known beforehand.

std::vector supports dynamic resizing (push_back, resize), which makes it more flexible.

Use Cases:

Use std::array when size is known at compile time and you want better performance and memory efficiency.

Use std::vector when size may change at runtime or when heap allocation is acceptable.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Upcasting - Converting derived class type to base class type is called as upcasting
This is also known as static_cast or compile time cast
Example - 
Employee* emp = new Salesperson(100,5);
Here converted derived class type to base class type 

Downcasting / dynamic_cast / run time casting - 
Converting derived class type into base class type
Employee* emp = new Salesperson(100,5);
SalesPerson* sp = dynamic_cast<SalesPerson*>(emp);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Difference between pointers and reference 

1. Pointer is an identifier for a memory location which stores an address of another type as its value.
1. Reference is alias name for already declared variable.

int var = 10;
int* ptr = &var;

int& ref = var;

2. Pointers can be null and it can be initialized later
2. References must be initialized at the time of declaration and it can not be null.

int* ptr = nullptr;
int& ref; // Error
int& ref = NULL; // error

3. Pointers can be reassigned while references cant

int* ptr = &var;
int var2 = 20;
ptr = &var2;

int& ref = var;
ref = var2; // This will not start pointing to the var2 instead of that it changes value of var to 20

4. to access the value we need to use * operator and to access the member we need to use -> operator with pointers
4. No need to use * or -> operator with reference










